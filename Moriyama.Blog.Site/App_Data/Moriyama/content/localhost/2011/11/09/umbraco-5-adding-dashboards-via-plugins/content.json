{
  "Name": "Umbraco 5: Adding Dashboards via plugins",
  "Type": "BlogPost",
  "CreateDate": "2011-11-09T21:10:38",
  "UpdateDate": "2015-01-19T18:43:24",
  "CreatorName": "Darren Ferguson",
  "WriterName": "Darren Ferguson",
  "Url": "http://localhost/2011/11/09/umbraco-5-adding-dashboards-via-plugins/",
  "RelativeUrl": "/2011/11/09/umbraco-5-adding-dashboards-via-plugins/",
  "Content": {
    "umbracoUrlAlias": "",
    "HideInNavigation": false,
    "umbracoInternalRedirectId": "",
    "redirect": "",
    "displayDate": "2011-11-09T21:02:00Z",
    "title": "Umbraco 5: Adding Dashboards via plugins",
    "shortUrl": "http://bit.ly/sPKltv",
    "summary": "'Umbraco 5: Adding Dashboards via plugins' - a blog post by Darren Ferguson about Umbraco Jupiter  written on the 21st October 2011",
    "tags": "Umbraco, Jupiter, Plugin",
    "bodyText": "\r\n<p><em>I'll add this post to the Umbraco 5 wiki in due\r\ncourse.</em></p>\r\n\r\n<p>This blog post will describe how to add dashboards to Umbraco 5\r\nvia a plugin - before starting, consider the following useful\r\nbackground reading:</p>\r\n\r\n<ul>\r\n<li><a rel=\"nofollow\"\r\nhref=\"http://blog.mattbrailsford.com/2011/09/30/automating-umbraco-v5-package-creation-using-msbuild/\">\r\nhttp://blog.mattbrailsford.com/2011/09/30/automating-umbraco-v5-package-creation-using-msbuild/</a></li>\r\n\r\n<li><a rel=\"nofollow\"\r\nhref=\"http://shazwazza.com/post/Umbraco-Jupiter-Plugins-Part-1.aspx\">\r\nhttp://shazwazza.com/post/Umbraco-Jupiter-Plugins-Part-1.aspx</a></li>\r\n</ul>\r\n\r\n<div>There are 5 parts to Shannon's series on Umbraco jupiter\r\nplugins.</div>\r\n\r\n<p>At time of writing (9th November 2011) some of the techniques\r\nused here require you to work from the latest Umbraco Jupiter\r\nsource code - the example won't work with the latest alpha\r\nrelease.</p>\r\n\r\n<p>Sample source code for the techniques described here are\r\navailable at:&nbsp;<a rel=\"nofollow\"\r\nhref=\"http://umbraco5contrib.codeplex.com/\">http://umbraco5contrib.codeplex.com/</a>&nbsp;and\r\nyou&nbsp;can get the source (mercurial) by cloning:&nbsp;<a\r\nrel=\"nofollow\"\r\nhref=\"https://hg01.codeplex.com/umbraco5contrib\">https://hg01.codeplex.com/umbraco5contrib</a></p>\r\n\r\n<p>The solution that this article refers to is\r\nin&nbsp;<em><strong>Source\\Dashboard.HelloWorld.sln.&nbsp;</strong></em>\r\nPlease read&nbsp;<em>ReadMe.txt&nbsp;</em> in the project root\r\nbefore building.</p>\r\n\r\n<p><span><strong>Obective:</strong></span></p>\r\n\r\n<p>To display a (Razor) view on and Umbraco 5 dashboard - using a\r\ncustom controller provided by an Umbraco 5 plugin.</p>\r\n\r\n<p><strong>Plugin folder structure:</strong></p>\r\n\r\n<p>Plugins go in:&nbsp;<strong>App_Plugins\\Packages\\&nbsp;</strong>\r\nfor now we'll be copying from Visual Studio to this location using\r\npost build events. To package and redistribute a plugin you'll want\r\nto read Mat's article which is linked above.</p>\r\n\r\n<p>In&nbsp;<strong>Dashboard.HelloWorld.csproj&nbsp;</strong> you\r\nwill need to modify the following XML to specify where you are\r\nrunning Umbraco 5 from.</p>\r\n\r\n<pre class=\"brush: xml;\">\r\n&lt;PropertyGroup&gt;\r\n    &lt;Umbraco5Dir&gt;C:\\Users\\Darren\\Source\\Umbraco\\Source\\Web Apps\\Umbraco.CMS.Web.UI&lt;/Umbraco5Dir&gt;\r\n&lt;/PropertyGroup&gt;\r\n</pre>\r\n\r\n<p>If you build the solution and browse to:</p>\r\n\r\n<p>&nbsp;<strong>App_Plugins\\Packages\\MyPackage.1.0&nbsp;</strong>\r\nyou should see the following child folders:</p>\r\n\r\n<ul>\r\n<li>lib (DLL files from your plugin)</li>\r\n\r\n<li>Views\\Partial (Razor cshtml files from your plugin)</li>\r\n</ul>\r\n\r\n<p>You'll also have a web.config at the root of your plugin\r\nfolder.&nbsp;If you refresh the Umbraco back office you should see\r\na Hello world view on your dashboard.</p>\r\n\r\n<p><strong>What makes this work:</strong></p>\r\n\r\n<p>The dashboard is defined in your plugin web.config - Umbraco\r\nJupiter uses a technique known as deep config which means plugin\r\ncofig is merged with the main application configuration.</p>\r\n\r\n<p>The dashboard snippet looks like this:</p>\r\n\r\n<pre class=\"brush: xml;\">\r\n&lt;umbraco.cms&gt;\r\n  &lt;dashboard-groups&gt;\r\n    &lt;group&gt;\r\n      &lt;applications&gt;\r\n        &lt;addapp=\"*\"/&gt;\r\n      &lt;/applications&gt;\r\n      &lt;dashboards&gt;\r\n        &lt;addtab=\"Hello There people\"type=\"childAction\"name=\"Dashboard.Index\"/&gt;\r\n      &lt;/dashboards&gt;\r\n    &lt;/group&gt;\r\n  &lt;/dashboard-groups&gt;\r\n&lt;/umbraco.cms&gt;\r\n</pre>\r\n\r\n<p>The configuration above defines the following things:</p>\r\n\r\n<ul>\r\n<li>The Umbraco application/section to add the dashboard to (in\r\nthis case * which means all)</li>\r\n\r\n<li>The tab title \"Hello There people\"</li>\r\n\r\n<li>The type - childAction for a controller - you can use\r\npartialView to display a Razor file directly.</li>\r\n\r\n<li>name - references the controller in the\r\nformat&nbsp;<strong><em>Name.Action</em></strong></li>\r\n</ul>\r\n\r\n<p><span><strong>How Umbraco 5 finds plugins:</strong></span></p>\r\n\r\n<p><span>In the solution open up AssemblyInfo.cs and note the\r\ninclusion of the following:</span></p>\r\n\r\n<pre class=\"brush: csharp;\">\r\n[assembly: AssemblyContainsPlugins()]\r\n</pre>\r\n\r\n<p><span>This attribute tells Umbraco to look inside this assembly\r\nfor plugins.</span></p>\r\n\r\n<p><strong>Modifications to the controller:</strong></p>\r\n\r\n<p>Consider the controller in our project:</p>\r\n\r\n<pre class=\"brush: csharp;\">\r\n[Editor(\"960d4aaf-8fae-44da-a3ff-5a2430ee6e4a\", HasChildActionDashboards = true)]\r\npublic class DashboardController : BaseEditorController\r\n{\r\n   public DashboardController(IBackOfficeRequestContext requestContext)\r\n       : base(requestContext)\r\n   {\r\n   }\r\n\r\n   [ChildActionOnly]\r\n   public ActionResult Index()\r\n   {\r\n       return View(\"HelloWorld\");\r\n   }\r\n}\r\n</pre>\r\n\r\n<p>The changes we've made in order for this to work on the\r\ndashboard are:</p>\r\n\r\n<ul>\r\n<li>Decorate the class with\r\nthe&nbsp;<em><strong>Editor&nbsp;</strong></em> attribute and\r\nprovide a GUID</li>\r\n\r\n<li>In the Editor attribute pass in true to\r\nthe&nbsp;<span><em><strong>HasChildActionDashboards</strong></em></span>\r\nproperty</li>\r\n\r\n<li>Inherit from the base\r\nclass&nbsp;<em><strong>BaseEditorController</strong></em></li>\r\n\r\n<li>Mark your action with\r\nthe&nbsp;<em><strong>ChildActionOnly</strong></em>&nbsp;attribute</li>\r\n</ul>\r\n",
    "commentsDisabled": 0
  },
  "Template": "Post",
  "CacheTime": null,
  "SortOrder": 1,
  "Level": 5
}