{
  "Name": "Creating custom Workflow for Umbraco tasks",
  "Type": "BlogPost",
  "CreateDate": "2011-10-15T15:54:43",
  "UpdateDate": "2015-01-19T18:43:24",
  "CreatorName": "Darren Ferguson",
  "WriterName": "Darren Ferguson",
  "Url": "http://localhost/2011/10/17/creating-custom-workflow-for-umbraco-tasks/",
  "RelativeUrl": "/2011/10/17/creating-custom-workflow-for-umbraco-tasks/",
  "Content": {
    "umbracoUrlAlias": "",
    "HideInNavigation": false,
    "umbracoInternalRedirectId": "",
    "redirect": "",
    "displayDate": "2011-10-17T09:07:00Z",
    "title": "Creating custom Workflow for Umbraco tasks",
    "shortUrl": "",
    "summary": "'Creating custom Workflow for Umbraco tasks'' - a blog post by Darren Ferguson about Umbraco, Workflow, written on the 17th October 2011",
    "tags": "Workflow, Umbraco",
    "bodyText": "\r\n<p>This post details how to create custom tasks for use with <a\r\nhref=\"http://our.umbraco.org/projects/backoffice-extensions/workflow\">\r\nWorkflow for Umbraco</a>. If you haven't already done so you may\r\nbenefit from watching the introductory screencast in <a\r\nhref=\"/2011/10/4/workflow-for-umbraco-and-drag-and-drop-event-programming\">\r\nthis blog post</a>.</p>\r\n\r\n<p>In the screencast below I run through how to create your own\r\nworkflow tasks and introduce some features that I didn't get around\r\nto in the first screen cast.</p>\r\n\r\n<p>The code demonstrated in the screencast is <a\r\nhref=\"http://our.umbraco.org/media/wiki/16479/634543648282718000_BitLyUrlShortenerTask.zip\">\r\navailable for download here</a>. If you create and send me a sample\r\nworkflow task for our <a\r\nhref=\"https://bitbucket.org/darrenjferguson/workflow-samples\">library\r\nof samples</a> then i'll give you a free worklow license (small\r\nprint below).</p>\r\n\r\n<p><a href=\"http://vimeo.com/30623479\"><img src=\"/media/126148/tasks2.png\" width=\"494\" height=\"393\" alt=\"Tasks2\"/></a></p>\r\n\r\n<p style=\"clear: both;\">The key points of the screencast are:</p>\r\n\r\n<ul>\r\n<li>You can create Runnable, Decision and Delay Tasks.</li>\r\n\r\n<li>When creating a Runnable task you\r\nimplement&nbsp;<strong><em>IRunnableWorkflowTask.</em></strong></li>\r\n\r\n<li>Inheriting from Base Workflow task is the easiest way to get\r\nstarted.</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n[Serializable]\r\npublic class BitLyUrlShorteningTask : BaseWorkflowTask, IRunnableWorkflowTask\r\n{\r\n</pre>\r\n\r\n<ul>\r\n<li>Your class should tell the designer about its possible outcomes\r\nusing the <strong><em>AvailableTransitions</em></strong> List</li>\r\n\r\n<li>Workflow tasks must always be marked as\r\n<strong><em>Serialiazble.</em></strong></li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n[Serializable]\r\npublic BitLyUrlShorteningTask() : base()\r\n{\r\n    // A workflow task should let the designer know what possible outcomes\r\n    AvailableTransitions.Add(\"done\");\r\n}\r\n</pre>\r\n\r\n<ul>\r\n<li><strong><em>IRunnableWorkflowTask</em></strong> demands that\r\nyou implement a <em><strong>Run</strong></em> method.</li>\r\n\r\n<li>For Umbraco workflows you can cast the workflowInstance\r\nparameter to\r\nan&nbsp;<strong><em>UmbracoWorkflowInstance</em></strong> to access\r\nUmbraco specific properties.</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n[Serializable]\r\n// Implement the Run method of IRunnableWorkflowTask\r\npublic void Run(IWorkflowInstance workflowInstance, IWorkflowRuntime runtime)\r\n{\r\n    // In Umbraco the workflowInstance should always be castable to an UmbracoWorkflowInstance\r\n    var wf = (UmbracoWorkflowInstance) workflowInstance;\r\n    ....\r\n</pre>\r\n\r\n<ul>\r\n<li>Your run method is responsible for informing the workflow\r\nruntime of the task outcome.</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\nruntime.Transition(workflowInstance, this, \"done\");\r\n</pre>\r\n\r\n<ul>\r\n<li>In Order that the designer knows how render the task you must\r\ncreate an <strong><em>IWorkflowTaskEntityUi</em></strong></li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n// An Entity Ui describes how the workflow task is rendered in the workflow Designer\r\npublic class BitLyUrlShorteningTaskEntityUi : BaseWorkflowTaskEntityUi, IWorkflowTaskEntityUi, IGlobalisable\r\n{\r\n    ...\r\n</pre>\r\n\r\n<ul>\r\n<li>Use the entity UI to describe task transitions</li>\r\n\r\n<li>To add CSS classes to your task in the designer</li>\r\n\r\n<li>To add Controls to the workflow designer to set the public\r\nproperties of the task.</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n// An Entity Ui describes how the workflow task is rendered in the workflow Designer\r\npublic BitLyUrlShorteningTaskEntityUi()\r\n            : base()\r\n{\r\n    // Describe the workflow transition\r\n    TransitionDescriptions.Add(\"done\", \"URL Was shortened\");\r\n\r\n    // Decorate your task with a custom CSS class in the designer.\r\n    // The workflow designer scans ~/umbraco/plugins/fmworkflow/css for custom CSS files and includes all of them.\r\n    UiAttributes.Add(\"class\", \"bitlyTask\");\r\n            \r\n    // These properties explain how to present a Ui to get values for the public properties of the workflow task.\r\n    UiProperties.Add(new BitLyApiKeyPropertyUi());\r\n    UiProperties.Add(new BitLyLoginPropertyUi());\r\n    UiProperties.Add(new DocumentTypePropertyUi());\r\n}\r\n</pre>\r\n\r\n<ul>\r\n<li>The Entity UI should also implement a method to tell the\r\ndesigner the name of the workflow task</li>\r\n\r\n<li>And also a method that tells the designer which workflow task\r\nit is for</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n// When passed an object returns a bool indicating whether this task can supply a UI for it.\r\npublic override bool SupportsType(object o)\r\n{\r\n    return o.GetType() == typeof(BitLyUrlShorteningTask);\r\n}\r\n\r\n// Name of task\r\npublic override string EntityName\r\n{\r\n    get { return \"Bit.ly URL Shorten\"; }\r\n}\r\n</pre>\r\n\r\n<ul>\r\n<li>The UiProperties list of the Entity Ui is a collection of\r\n<em><strong>IWorkflowUiProperty</strong></em></li>\r\n\r\n<li>A Property UI desribes how to get and set a public propery of a\r\nworkflow task using the workflow designer</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\npublic class BitLyApiKeyPropertyUi : PropertyUi, IWorkflowUiProperty, IGlobalisable\r\n{\r\n    ....\r\n</pre>\r\n\r\n<ul>\r\n<li>The Property UI defines a Render Control</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\npublic Control RenderControl { get; private set; }\r\n\r\npublic BitLyApiKeyPropertyUi()\r\n{\r\n    // Just says that a TextBox will be used to get the property value from the user.\r\n    RenderControl = new TextBox { ID = PropertyName, CssClass = \"workflowTextBox\" };\r\n}\r\n</pre>\r\n\r\n<ul>\r\n<li>A getter and a setter for its value</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n// The workflow designer uses this getter and setter to give or take the value of the property.\r\npublic object Value\r\n{\r\n    get { return ((TextBox)RenderControl).Text; }\r\n    set { ((TextBox)RenderControl).Text = (string)value; }\r\n}\r\n</pre>\r\n\r\n<ul>\r\n<li>And lastly implements two properties which return the name of\r\nthe property to set and the description of the property</li>\r\n</ul>\r\n\r\n<pre class=\"brush: csharp;\">\r\n// Label for control when rendered in Ui\r\npublic string Label\r\n{\r\n    get { return \"Bit.ly API key\"; }\r\n}\r\n\r\n// The workflow designer uses this getter and setter to give or take the value of the property.\r\npublic object Value\r\n{\r\n    get { return ((TextBox)RenderControl).Text; }\r\n    set { ((TextBox)RenderControl).Text = (string)value; }\r\n}\r\n</pre>\r\n\r\n<p>If you send me a sample worklflow task I'll add it to our\r\nlibrary and generate you a free license. It needs to be a sample\r\nthat I don't have already and do something useful (not just log\r\nHello world to a file etc). I'll be the final just of what is\r\nuseful :)</p>\r\n",
    "commentsDisabled": 0
  },
  "Template": "Post",
  "CacheTime": null,
  "SortOrder": 1,
  "Level": 5
}