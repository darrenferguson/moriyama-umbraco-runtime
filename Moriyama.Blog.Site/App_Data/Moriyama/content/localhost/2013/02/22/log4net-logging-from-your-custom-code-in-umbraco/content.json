{
  "Name": "Log4net logging from your custom code in Umbraco",
  "Type": "BlogPost",
  "CreateDate": "2013-02-22T09:27:41",
  "UpdateDate": "2015-01-02T16:11:23",
  "CreatorName": "Darren Ferguson",
  "WriterName": "Darren Ferguson",
  "Url": "http://localhost/2013/02/22/log4net-logging-from-your-custom-code-in-umbraco/",
  "RelativeUrl": "/2013/02/22/log4net-logging-from-your-custom-code-in-umbraco/",
  "Content": {
    "umbracoUrlAlias": "",
    "HideInNavigation": false,
    "umbracoInternalRedirectId": "",
    "redirect": "",
    "displayDate": "2013-02-22T09:00:00Z",
    "title": "Log4net logging from your custom code in Umbraco",
    "shortUrl": "",
    "summary": "'Log4net logging from your custom code in Umbraco' - a blog post by Darren Ferguson about Log4net, Umbraco written on 22 February 2013",
    "tags": "Log4net, Umbraco, Logging, Logger",
    "bodyText": "<p><strong><em>Disclaimer: this isn't an introduction to log4net. Please Google for a more generic introduction.</em></strong></p>\n<p>Recent versions of Umbraco ship with <strong><em><a href=\"http://logging.apache.org/log4net/\">Log4Net</a></em></strong> - previously it was reasonably straightforward to add it to your customisations but now it is really simple to <em>do</em> logging in your custom code. It is also arguably essential as there isn't a current method for receiving the Umbraco page assembly trace in the new MVC \"rendering mode\".</p>\n<p>This blog post will explain how to get a reference to a <strong><em><a href=\"http://logging.apache.org/log4net/\">log4net</a></em></strong> logger in your custom code and then how to control the Level of your logging and filter messages from your code to their own log file.</p>\n<p>First up you'll need a reference to log4net in your project. I recommend referencing the version of log4net that ships with Umbraco directly in the <strong><em>/bin</em></strong> folder of the distribution. Umbraco ships with a patched version of log4net - but the assembly version matches an official version which has got me into a few challenges when referencing via nuget.</p>\n<p>Once I have the reference I can add the following to each class that I want to log from:</p>\n<pre class=\"brush: csharp;\">public class Class1\n{\n    private static readonly ILog Log =\n        LogManager.GetLogger(\n            MethodBase.GetCurrentMethod().DeclaringType\n        );\n</pre>\n<p>You normally put this just inside the class declaration as above. The argument to GetLogger just resolves to the current type and is a convenience so you can paste the same snippet into any class without having to make modifications.</p>\n<p>You can now use your Logger anywhere in your code:</p>\n<pre class=\"brush: csharp;\">Log.Debug(\"Umbraco is starting\");\nLog.Info(string.Format(\"Umbraco is running on {0}\", Environment.MachineName));\n</pre>\n<p>And you are done - kind of. If you take a look in <strong><em>~/App_Data/Logs/UmbracoTraceLog.txt</em></strong> then you should find your log messages. The problem is they are interspersed with lots of other messages that Umbraco logs itself making them rather hard to find.</p>\n<p>With a little configuration you can write your messages to their own log file. Start by opening up <em><strong>~/config/log4net.config</strong></em></p>\n<p>Take a copy of the Xml node that begins:</p>\n<pre class=\"brush: xml;\">&lt;appender name=\"AsynchronousLog4NetAppender\"\n</pre>\n<p>And give it a different and unique name attribute. Also, specify a path to your custom log file in the file child node. My modified example looks like this:</p>\n<pre class=\"brush: xml;\">&lt;appender name=\"CustomAppender\" type=\"Umbraco.Core.Logging.AsynchronousRollingFileAppender, Umbraco.Core\"&gt;\n    &lt;file value=\"App_Data\\Logs\\Moriyama.log.txt\" /&gt;\n    &lt;lockingModel type=\"log4net.Appender.FileAppender+MinimalLock\" /&gt;\n    &lt;appendToFile value=\"true\" /&gt;\n    &lt;rollingStyle value=\"Date\" /&gt;\n    &lt;maximumFileSize value=\"5MB\" /&gt;\n    &lt;layout type=\"log4net.Layout.PatternLayout\"&gt;\n        &lt;conversionPattern value=\"%date [%thread] %-5level %logger - %message%newline\" /&gt;\n    &lt;/layout&gt;\n&lt;/appender&gt;\n</pre>\n<p>The snippet above is just a definition for your custom log file. You can read lots more about configuring appenders in the log4net documentation.</p>\n<p>Finally you need to declare a logger for your namespace, add the following logger declaration to log4net.config</p>\n<pre class=\"brush: xml;\">&lt;logger name=\"Moriyama.UmbracoCustom\"&gt;\n    &lt;level value=\"DEBUG\" /&gt;\n    &lt;appender-ref ref=\"CustomAppender\" /&gt;\n&lt;/logger&gt;\n</pre>\n<p>The <em>name attribute</em> of the logger is a namespace or class name that the logger applies to - change this to the root namespace of your Umbraco customisation project. The <em>ref</em> attribute of the <em>appender-ref</em> node should match the appender name that you create in the previous step.</p>\n<p>You logging code should now log into your custom log file. <em>Be aware that you should probably raise the level of your loggers to at least <strong>ERROR</strong> when going into production.</em></p>\n<p>Here is a complete class example that writes some messages to a log file when Umbraco starts:</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Reflection;\nusing log4net;\nusing umbraco.interfaces;\n\nnamespace Moriyama.UmbracoCustom\n{\n    public class Class1 : IApplicationStartupHandler\n    {\n        private static readonly ILog Log = \n            LogManager.GetLogger(\n                MethodBase.GetCurrentMethod().DeclaringType\n            );\n\n        public Class1()\n        {\n            Log.Debug(\"Umbraco is starting\");\n            Log.Info(string.Format(\"Umbraco is running on {0}\", Environment.MachineName));\n        }\n    }\n}\n</pre>\n<p>The resulting output in my custom log file is as follows:</p>\n<pre>2013-02-22 09:21:17,154 [34] DEBUG Moriyama.UmbracoCustom.Class1 - Umbraco is starting\n2013-02-22 09:21:17,154 [34] INFOÂ  Moriyama.UmbracoCustom.Class1 - Umbraco is running on DARREN-VAIO\n</pre>\n<p>With log4net you can change the format of your log entries and also log to a database, XML file or even email.</p>\n<p>That is all for now - happy logging.</p>\n<p><em>Sorry I haven't blogged much this year - I will try to do better in 2013.</em></p>",
    "commentsDisabled": 0
  },
  "Template": "Post",
  "BuildTime": "2015-01-02T16:36:47.5903765+00:00",
  "FromCache": false,
  "SortOrder": 1,
  "Level": 5
}