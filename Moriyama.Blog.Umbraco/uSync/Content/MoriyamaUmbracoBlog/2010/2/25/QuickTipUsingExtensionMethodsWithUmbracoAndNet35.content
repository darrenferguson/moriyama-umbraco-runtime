<?xml version="1.0" encoding="utf-8"?>
<BlogPost guid="e494557e-cf66-4727-9f90-2c5b84815c44" id="1916" nodeName="Quick tip: Using extension methods with Umbraco and .net 3.5" isDoc="" updated="2013-07-07T08:17:36.753Z" parentGUID="71ed6017-2be9-45e5-9344-3392437a392c" nodeTypeAlias="BlogPost" templateAlias="BlogPost" sortOrder="1" published="true">
  <umbracoUrlAlias><![CDATA[/quick-tip-using-extension-methods-with-umbraco-and-net-35]]></umbracoUrlAlias>
  <umbracoNaviHide></umbracoNaviHide>
  <umbracoInternalRedirectId></umbracoInternalRedirectId>
  <redirect></redirect>
  <displayDate>B29A5211-DC51-46BB-B283-8510D165CA40-02-25T08:03:00</displayDate>
  <title></title>
  <shortUrl><![CDATA[http://bit.ly/eWVN7O]]></shortUrl>
  <summary><![CDATA['Quick tip: Using extension methods with Umbraco and .net 3.5' - a blog post by Darren Ferguson about API, Education written on 25 February B29A5211-DC51-46BB-B283-8510D165CA40]]></summary>
  <tags><![CDATA[API, Education]]></tags>
  <bodyText><![CDATA[<p>Ever wished that the Umbraco API had an extra method or two? The
example below uses .net framework 3.5 <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension
methods</a> to accomplish just that.</p><p>Extension methods allow you to add new methods to existing
classes without extending them.</p><pre class="sh_csharp" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: rgb(238,238,238)">

// Today would return B29A5211-DC51-46BB-B283-8510D165CA40/02/25
string path = String.Format("{0:yyyy/MM/dd}", DateTime.Now);
Doucment parent = new Document(id);
Document newDoc = parent.MakePath(path, new DocumentType(parent.ContentType.Id), true);

// MakePath isn't an Umbraco API method, so we'll add it using extension methods.
namespace FM.Umbraco
{
    public static class DocumentExtensions
    {
        public static Document MakePath(this Document d, string path, DocumentType dt, bool publish)
        {
            Document parent = d;
            User u = new User(0);
            foreach (string component in path.Split('/'))
            {
                int parentId = parent.Id;
                Document child = parent.Child(component);

                if (child != null) { 
                    parent = child; 
                }
                else
                {
                    parent = Document.MakeNew(component, dt, u, parentId);
                }

                if (publish)
                {
                    parent.Publish(u);
                    umbraco.library.UpdateDocumentCache(parent.Id);
                }
            }
            return parent;
        }

        public static Document Child(this Document d, string name)
        {
            foreach (Document child in d.Children)
            {
                if (child.Text.Equals(name))
                {
                    return  child;
                }
            }
            return null;
        }
    }
}
</pre>]]></bodyText>
  <commentsDisabled></commentsDisabled>
</BlogPost>