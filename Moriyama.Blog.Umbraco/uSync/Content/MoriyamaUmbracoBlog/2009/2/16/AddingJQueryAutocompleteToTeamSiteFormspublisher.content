<?xml version="1.0" encoding="utf-8"?>
<BlogPost guid="ab345438-ee3f-4af8-8151-197a5a426dd8" id="1882" nodeName="Adding jQuery autocomplete to TeamSite Formspublisher" isDoc="" updated="2013-07-07T08:18:00.823Z" parentGUID="a9e92d15-39bf-4913-a1b2-c9dbe1ae1eb3" nodeTypeAlias="BlogPost" templateAlias="BlogPost" sortOrder="1" published="true">
  <umbracoUrlAlias><![CDATA[/adding-jquery-autocomplete-to-teamsite-formspublisher]]></umbracoUrlAlias>
  <umbracoNaviHide></umbracoNaviHide>
  <umbracoInternalRedirectId></umbracoInternalRedirectId>
  <redirect></redirect>
  <displayDate>A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2-02-16T08:01:00</displayDate>
  <title></title>
  <shortUrl><![CDATA[http://bit.ly/fvCQBk]]></shortUrl>
  <summary><![CDATA['Adding jQuery autocomplete to TeamSite Formspublisher' - a blog post by Darren Ferguson about JSON, Javascript, DOM, GUI, Web GUI, completely straight forward written on 16 February A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2]]></summary>
  <tags><![CDATA[JSON, Javascript, DOM, GUI, Web GUI, completely straight forward]]></tags>
  <bodyText><![CDATA[<p>The <a href="http://www.interwoven.com/components/pagenext.jsp?topic=PRODUCT::TEAMSITE">TeamSite</a> Formspublisher GUI is getting a little old. Although extremely powerful when it comes to capturing user input, it hasn’t always kept up with some of the advancements in Web GUI.</p><p>Recently, I was asked to add a select dialogue to a TeamSite data-capture template that contained hundreds of options. Out of the box you could either have a massive scrolling select box or a callout that launched a pop-up window and displayed the data in some custom fashion, neither of which are a particularly pleasant user experience.</p><p>The obvious UI pattern for choosing from a large data set is an “auto complete” control. <a href="http://jquery.com">jQuery</a> provides a <a href="http://jquery.bassistance.de/autocomplete/demo/">plugin</a> to do all of the hard work for us.</p><p>After a bit of hacking around I managed to get everything working nicely in TeamSite.</p><p><img alt="jQuery auto complete in TeamSite Formspublisher" src="/media/77600/2738_1.jpg" /></p><p>Getting this working isn’t completely straight forward so I’ve decided to share the process here.</p><p>Start by placing the jQuery files an any plugins that you want to use within Formspublisher in <em>iw-home/iw. </em>Include jQuery within your DCT as follows:</p><pre style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE datacapture SYSTEM "datacapture6.0.dtd"&gt;
&lt;data-capture-requirements&gt;
	&lt;ruleset name="dct"&gt;
		&lt;script language="javascript" type="text/javascript" src="/iw/jquery/jquery-1.3.1.min.js" /&gt;
		&lt;root-container location="..." name="...."&gt;
			.... DCT Structure here .....
		&lt;/root-container&gt;
	&lt;/ruleset&gt;
&lt;/data-capture-requirements&gt;</pre><p>Now we need to add some JavaScript to the DCT:</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">var o = {};

o.iwInitialised = false;
o.loadedScripts = 0;
o.stylesheets = new Array(
	'/iw/mi_custom/jquery/plugins/jquery.autocomplete.css
');
o.scripts = new Array(
	'/iw/mi_custom/jquery/jquery-1.3.1.min.js',
	'/iw/mi_custom/jquery/plugins/jquery.autocomplete.pack.js'
);
o.formField = null;
o.data= [];</pre><p>Above we are just setting up some variables. You’ll notice a list of scripts and CSS files we want to use within Formspublisher and a few basic state variables.</p><p>The next thing we want to achieve is to wait until both the FormAPI onFormInit event has been fired and the DOM is fully loaded in order that we start our manipulations:</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">IWEventRegistry.addFormHandler("onFormInit", o.iwInitalise);

$().ready(function() {
	o.waitForIwInitialise();
});

o.waitForIwInitialise = function() {
	if(!o.iwInitialised) {
		setTimeout('o.waitForIwInitialise()', 500);
	} else {
		o.ready();
	}
}</pre><p>The code above instructs jQuery to periodically check whether the o.iwInitialised variable has been set to true by the formAPI onFormInit event before executing the next steps. The onFormInit code looks like this:</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">o.iwInitalise = function() {
	o.iwInitialised = true;
	o.formField = IWDatacapture.getItem('my/text');
	o.formField.setReadOnly(true);
	
}</pre><p>Note that as well as setting a flag to say that Formspublisher is initialised I am also disabling the field that we will apply auto-completion to. I had issues when a user would start to type before auto complete was fully initialised.</p><p>Next we’ll get some JSON from the TeamSite server that contains all of the values for our auto-complete field:</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">o.ready = function() {
	$.getJSON('/iw/data/city.json', function(data) {
		o.data= data;
		o.loadStylesheets();
	});
}</pre><p>I am storing my JSON in <em>iw-home/httpd/iw. </em>The jQuery auto-complete plugin allows for a number of different JSON formats but I am just using an <a href="http://jquery.bassistance.de/autocomplete/demo/localdata.js">array of cities</a> for purposes of demonstration.</p><p>A TeamSite DCT is rendered to the browser as a series of iFrames. Our next step is to inject the Javascript and CSS that we need into the iFrame containing the form that makes up our DCT.</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">o.loadStylesheets = function() {
	
	var f = window.top.formframe.document;
	var head = f.getElementsByTagName('head')[0];
	
	$(o.stylesheets).each(function() {
		var script = f.createElement("link");
  		script.setAttribute("rel", "stylesheet");
  		script.setAttribute("type", "text/css");
  		script.setAttribute("href", this);
		head.appendChild(script);
	});
	
	o.loadScripts();
}

o.loadScripts = function() {
	
	var f = window.top.formframe.document;
	if(o.loadedScripts &lt; o.scripts.length) {
		
		var head = f.getElementsByTagName('head')[0];
		var src = o.scripts[o.loadedScripts];
		var script = f.createElement('script');
		
		script.setAttribute('src', src);
		script.setAttribute('type', 'text/javascript');
		
		o.loadedScripts++;
		script.onreadystatechange= function () {
			if (this.readyState == 'loaded') o.loadScripts();
   		}
		script.onload = o.loadScripts;
		head.appendChild(script);
		
	} else {
		o.topFrameLoaded();
	}
}</pre><p>A few things to note about the functions above. We are targeting our CSS and scripts at <em>window.top.formframe.document </em>which is where the DCT form resides. The list of Javascript and CSS files is taken from our configuration variables so you could reuse this code to add any jQuery plugins that you wish to use.</p><p>CSS is being loaded in a fire and forget fashion, we are not checking it’s load state before proceeding to load JavaScript, this is only because I’m not sure how to do it. This could expose us to the styles not being loaded before the user starts to interact with the form but I haven’t experienced this to date. The code to load JavaScript is a bit smarter, only proceeding once all scripts are loaded.</p><p>You’ll note that we’ve loaded jQuery again as we are interested in manipulating the DOM in another iFrame. The best way that I have found to do that is simply to have an instance of JQuery within the frame.</p><p>Now we have all of our pre-requisites loaded the final step is to enable auto complete.</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">o.topFrameLoaded = function() {
	
	var f = window.top.formframe;
	f.document.mi0 = {};
	f.document.o.data = o.data;
	f.$('input[name=my/text]').blur();	
	f.$('input[name=my/text]').autocomplete(f.document.o.data, {matchContains: true});
	o.formField.setReadOnly(false);
	f.$('input[name=my/text]').focus();	
}</pre><p>Here we are finding a reference to our text field in the DCT and enabling auto complete. We are also re-enabling the field now that all is ready. I found that I had to blur the field prior to auto complete initialisation through some trial and error.</p><p>Obviously the auto complete plugin has many options and can be configured however you wish.</p><p>Finally, for bonus points you can ensure that the user enters a value from your list of options using the following bit of formAPI.</p><pre class="sh_javascript" style="border-right: black 1px solid; padding-right: 7px; border-top: black 1px solid; padding-left: 7px; padding-bottom: 7px; border-left: black 1px solid; padding-top: 7px; border-bottom: black 1px solid; background-color: #eeeeee">IWEventRegistry.addItemHandler('/my/text', 'onItemChange', function(item) {
	var v = item.getValue();
	var found = false;
	$(o.data).each(function() {
		if(v == this) { 
			found = true;
			return;
		}
	});
	item.setValid(found);
});</pre><p>Anyway, I hope you found this helpful. For me it opens the door to give Formspublisher some extra usability.</p>]]></bodyText>
  <commentsDisabled></commentsDisabled>
</BlogPost>