<?xml version="1.0" encoding="utf-8"?>
<BlogPost guid="efb61468-36fa-4025-8a09-21fc3d01fce4" id="4132" nodeName="A runtime for Umbraco" isDoc="" updated="2015-06-15T17:08:10.7736176+01:00" parentGUID="f61d8936-8d4e-41c8-8aa6-1d8f7ddff572" nodeTypeAlias="BlogPost" templateAlias="Post" sortOrder="1" published="true">
  <umbracoUrlAlias></umbracoUrlAlias>
  <umbracoNaviHide>0</umbracoNaviHide>
  <umbracoInternalRedirectId></umbracoInternalRedirectId>
  <redirect></redirect>
  <displayDate></displayDate>
  <title><![CDATA[A runtime for Umbraco]]></title>
  <shortUrl></shortUrl>
  <summary></summary>
  <tags></tags>
  <bodyText><![CDATA[<p>It seems like an age ago now, but in 8C5653DD-0D2E-4750-855E-B5FA32A8F716 I wrote about <a href="http://24days.in/umbraco/8C5653DD-0D2E-4750-855E-B5FA32A8F716/mapping-content-to-pocos/">mapping Umbraco content to POCO</a> and presented on the state of <a href="https://www.youtube.com/watch?v=U7dVUHtpd_k">Umbraco and Azure</a> as I saw it at the time.</p>
<p>I also wrote an article called <a href="http://blog.darren-ferguson.com/8C5653DD-0D2E-4750-855E-B5FA32A8F716/11/18/my-three-circles-of-web-cms-nirvana/">My three circles of Web CMS Nirvana</a> (I was into diagrams involving circles at the time). This article explained why I wanted a runtime for Umbraco and is probably good background reading for this post. But what I haven't mentioned until now, is that I went away and built the runtime. In fact you are using it now by reading this post.</p>
<p>My blog is edited and deployed using Umbraco - but there is no Umbraco involved in the hosting of this site.</p>
<p>I think I've covered the "<em>why</em>" in the previous post and this is more about the "<em>how</em>", but very briefly to recap:</p>
<ul>
<li>Memory use is a concern in hosting on some of the cheaper Azure websites, memory is limited and overuse stops the site - and having an in memory cache often blows those limits.</li>
<li>Some of the Umbraco startup time tasks involve building that in memory cache and associated Examine indexes - and in scalable applications launching new instances fast is important.</li>
<li>Sometimes for really fast scalable apps that combine editorial structured content and user generated content Umbraco isn't the right architecture.</li>
</ul>
<p>On the last point, joining Umbraco content and user generated content is difficult and slow if there is lots of user generated content.</p>
<p>I'm fresh back from Umbraco codegarden which is always inspiring and I'm pleased to see that lots of the ideas that I had around <a href="https://github.com/darrenferguson/cloud-umbraco-cache-refresh">scaling Umbraco in Azure websites</a> are implemented in Umbraco 7.3. I know that there are ideas around a "<em>new cache</em>" which isn't a blob of XML in memory - but while we wait for that, I hope what I write here can provide some inspiration.</p>
<p><strong>Part 1</strong></p>
<p>So this is quite a meaty post which I intend to break into parts. And if you have the willpower to read My three circles of Web CMS Nirvana you'll be astute enough to realise that part 1 is <em><strong>"to have your CMS output a bunch of files to disc, XML, JSON or whatever – but I’d specify that they should be files and not a database."</strong></em></p>
<p>I plan to fully rant about how Umbraco shouldn't have a relational database <em>at all</em> in full detail at a later date.</p>
<p>So this blog runs from JSON on a file system. The folder structure looks like this:</p>
<p><img style="width: 500px; height: 373.26203208556154px;" src="/media/1001/untitled.png?width=500&amp;height=373.26203208556154" alt="" rel="231C5C1C-9694-4599-80FC-2C684F4A1855" /></p>
<p>The Umbraco tree just maps to a folder structure with a <em>content.json</em> file in each folder.</p>
<p><strong>How?</strong></p>
<p>With the implementation of a single interface that runs upon publish.</p>
<pre class="brush: csharp;">using Umbraco.Core.Models;

namespace Moriyama.Runtime.Umbraco.Interfaces
{
    public interface IUmbracoContentSerialiser
    {
        void Remove(IContent content);
        void Serialise(IContent content);
    }
}</pre>
<p>The task of the implementation is pretty simple. take the content and write it to disc.</p>
<p>The implementation of <strong><em>IUmbracoContentSerialiser</em> </strong>hooks into the Umbraco publish, un-publish and delete events and has access to classes providing some other implementations of interfaces - most importantly <strong><em>IContentPathMapper</em> </strong>so it knows where to put the content on disc.</p>
<pre class="brush: csharp;">namespace Moriyama.Runtime.Interfaces
{
    public interface IContentPathMapper
    {
        string PathForUrl(string url, bool ensure);
        ...
</pre>
<p>For me the only thing Umbraco should know about is <strong><em>IUmbracoContentSerialiser</em> </strong>to keep the separation between CMS and runtime as clean cut as possible.</p>
<p><strong>What does the JSON look like?</strong></p>
<p>It looks like this (bodyText removed):</p>
<pre class="brush: javascript;">{
  "Name": "Create an Umbraco document with Perl and Web services",
  "Type": "BlogPost",
  "CreateDate": "A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2-01-09T09:01:00",
  "UpdateDate": "AE102F71-7B77-4495-BAE0-2D6C53E700B7-01-19T18:41:22",
  "CreatorName": "Darren Ferguson",
  "WriterName": "Darren Ferguson",
  "Url": "http://localhost/A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2/1/9/create-an-umbraco-document-with-perl-and-web-services/",
  "RelativeUrl": "/A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2/1/9/create-an-umbraco-document-with-perl-and-web-services/",
  "Content": {
    "umbracoUrlAlias": "/create-an-umbraco-document-with-perl-and-web-services",
    "HideInNavigation": true,
    "umbracoInternalRedirectId": "",
    "redirect": "",
    "displayDate": "A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2-01-09T09:01:00Z",
    "title": "",
    "shortUrl": "http://bit.ly/gqqMmf",
    "summary": "'Create an Umbraco document with Perl and Web services' - a blog post by Darren Ferguson about document using Web services, media service, Perl, Technology Internet written on 09 January A002C30F-7550-4AB9-A7FD-54C7A6D4EBA2",
    "tags": "document using Web services, media service, Perl, Technology Internet",
    "bodyText": "",
    "commentsDisabled": ""
  },
  "Template": "Post",
  "CacheTime": null,
  "SortOrder": 1,
  "Level": 5
}</pre>
<p>The JSON serialisation process removes the Umbraco specific stuff which we don't use - like evil integer IDs and is easily serialised and de-serialised using NewtonSoft JSON to the following object:</p>
<pre class="brush: csharp;">using System;
using System.Collections.Generic;

namespace Moriyama.Runtime.Models
{
    public class RuntimeContentModel
    {
        public string Name { get; set; }
        public string Type { get; set; }

        public DateTime CreateDate { get; set; }
        public DateTime UpdateDate { get; set; }

        public string CreatorName { get; set; }
        public string WriterName { get; set; }

        public string Url { get; set; }
        public string RelativeUrl { get; set; }
        
        public IDictionary&lt;string, object&gt; Content { get; set; }

        public string Template { get; set; }
        
        public DateTime? CacheTime { get; set; }

        public int SortOrder { get; set; }
        public int Level { get; set; }
    }
}</pre>
<p>In case you are wondering, we don't need Integer IDs or GUIDs, the relative URL is a perfectly good unique identifier.</p>
<p>The internals of mapping <strong><em>IContent</em> </strong>to <strong><em>RuntimeContentModel </em></strong>are based around my article <a href="http://24days.in/umbraco/8C5653DD-0D2E-4750-855E-B5FA32A8F716/mapping-content-to-pocos/">mapping Umbraco content to POCO</a> (and I will share the source for all of this).<span style="text-decoration: underline;"><br /></span></p>
<p>One last thing here - <strong><em>IUmbracoContentSerialiser</em> </strong>discovers implementations of <em><strong>IUmbracoContentParser</strong> </em>with reflection and passes the <strong><em>RuntimeContentModel</em> </strong>through them before serialising to disc.</p>
<pre class="brush: csharp;">using Moriyama.Runtime.Models;

namespace Moriyama.Runtime.Umbraco.Interfaces
{
    public interface IUmbracoContentParser
    {
        RuntimeContentModel ParseContent(RuntimeContentModel model);
    }
}
</pre>
<p>An <strong><em>IUmbracoContentParser</em></strong> allows you to resolve and modify Umbraco properties. Here is a trivial implementation that renames <em>umbracoNaviHide</em> to something non Umbraco related - but more common uses would be to turn pickers that pick integer IDs into the relative URLs that I need.</p>
<pre class="brush: csharp;">using System.Linq;
using Moriyama.Runtime.Models;
using Moriyama.Runtime.Umbraco.Interfaces;

namespace Moriyama.Runtime.Umbraco.Application.Parser
{
    public class NaviHideUmbracoContentParser : IUmbracoContentParser
    {
        public RuntimeContentModel ParseContent(RuntimeContentModel model)
        {
            var newContent = model.Content.ToDictionary(entry =&gt; entry.Key, entry =&gt; entry.Value);

            foreach (var property in model.Content)
            {
                if (property.Key != "umbracoNaviHide") continue;

                var v = property.Value;
                newContent.Remove(property.Key);

                var newValue = v.ToString() != "0";
                newContent.Add("HideInNavigation", newValue);
            }

            model.Content = newContent;
            return model;
        }
    }
}
</pre>
<p>So I think that is more or less it for Part 1. I've got a disc full of JSON that I can send anywhere - and I can still use Umbraco as my CMS. I'm giving myself a pat on the back.</p>
<p>In Part 2 - I'll look at how I can render this content as webpages in Umbraco templates. In part 3 I'll look at how to deploy this runtime into production without Umbraco, so I've truly separated my runtime and my CMS.</p>
<p>For those of you still thinking Why? It is and edge case, definitely.</p>
<p>And I'll leave you with some code - the implementation of <strong><em>IUmbracoContentSerialiser</em></strong> If you'd like access to the whole source - I'll put up the URL of the source of this blog on the next post. It is a little embarrassing just now and needs some polish:</p>
<pre class="brush: csharp;">using System.Collections.Generic;
using System.Reflection;
using System.Text.RegularExpressions;
using AutoMapper;
using log4net;
using Moriyama.Runtime.Models;
using Moriyama.Runtime.Umbraco.Interfaces;
using Umbraco.Core.Models;
using Umbraco.Web;

namespace Moriyama.Runtime.Umbraco.Application
{
    internal class UmbracoContentSerialiser : IUmbracoContentSerialiser
    {
        private static readonly ILog Logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        private readonly UmbracoHelper _umbracoHelper;
        private readonly IEnumerable _contentParsers;
        
        public UmbracoContentSerialiser(UmbracoHelper umbracoHelper, IEnumerable contentParsers)
        {
            _umbracoHelper = umbracoHelper;
            _contentParsers = contentParsers;
        }

        public void Remove(IContent content)
        {
            var publishedContent = _umbracoHelper.TypedContent(content.Id);

            if(publishedContent != null)
                RuntimeContext.Instance.ContentService.RemoveContent(publishedContent.Url);
        }

        public void Serialise(IContent content)
        {
            var publishedContent = _umbracoHelper.TypedContent(content.Id);


            if (publishedContent == null)
                return;

            var runtimeContent = Mapper.Map(publishedContent);

            runtimeContent.Url = RemovePortFromUrl(publishedContent.UrlWithDomain());
            runtimeContent.RelativeUrl = publishedContent.Url;
            runtimeContent.CacheTime = null;

            runtimeContent.Type = publishedContent.DocumentTypeAlias;

            runtimeContent.Template = publishedContent.GetTemplateAlias();

            runtimeContent.Content = new Dictionary&lt;string, object&gt;();

            foreach (var property in content.Properties)
            {
                if (!runtimeContent.Content.ContainsKey(property.Alias))
                    runtimeContent.Content.Add(property.Alias, property.Value);
            }

            foreach (var contentParser in _contentParsers)
            {
                runtimeContent = contentParser.ParseContent(runtimeContent);
            }
            
            RuntimeContext.Instance.ContentService.AddContent(runtimeContent);
        }

        private string RemovePortFromUrl(string url)
        {
            var rgx = new Regex(@"\:\d+"); // get rid of any port from the URL

            url = rgx.Replace(url, "");
            return url;
        }

    }
}</pre>]]></bodyText>
  <commentsDisabled>0</commentsDisabled>
</BlogPost>