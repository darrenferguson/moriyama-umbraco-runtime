{
  "Name": "A runtime for Umbraco - Part 4",
  "Type": "BlogPost",
  "CreateDate": "2015-09-25T08:53:55",
  "UpdateDate": "2015-10-10T10:34:39",
  "CreatorName": "Darren Ferguson",
  "WriterName": "Darren Ferguson",
  "Url": "http://localhost/2015/09/25/a-runtime-for-umbraco-part-4/",
  "RelativeUrl": "/2015/09/25/a-runtime-for-umbraco-part-4/",
  "Content": {
    "umbracoUrlAlias": "",
    "HideInNavigation": false,
    "umbracoInternalRedirectId": "",
    "redirect": "",
    "displayDate": "2015-09-25T08:53:47Z",
    "title": "A runtime for Umbraco - Part 4",
    "shortUrl": "",
    "summary": "",
    "tags": "",
    "bodyText": "<p>It has been a while since I wrote about the Moriyama runtime for Umbraco - and that is because it has undergone quite a bit of development.</p>\n<p>I want to talk about the concept of a Deployment Adapter - that hooks into Umbraco publish and unpublish events to add and remove content to a runtime.</p>\n<p>The serialisation of content has already taken place. The deployment adapter is simply responsible for sending that content somewhere:</p>\n<p>The definition of a deployment adapter looks like this:</p>\n<pre class=\"brush: csharp;\">using Moriyama.Runtime.Models;\n\nnamespace Moriyama.Runtime.Umbraco.Interfaces\n{\n    public enum DeploymentAction\n    {\n        Deploy, Delete\n    }\n\n    public interface IDeploymentAdapter\n    {\n        void DeployContent(RuntimeContentModel model, DeploymentAction action);\n    }\n}</pre>\n<p>At Moriyama we have several implementations:</p>\n<ul>\n<li>FTP</li>\n<li>Azure Blob storage</li>\n<li>Amazon S3</li>\n<li>GIT</li>\n<li>REST</li>\n<li>ZIP</li>\n</ul>\n<p class=\"brush: csharp;\">We'll take a look at the last one. The REST deployment adapter sends the serialised content to an endpoint and allows the receiving application to do what it needs with the content. In most cases this would just be to write the content to the local filesystem.</p>\n<pre class=\"brush: csharp;\">using System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.IO;\nusing System.Net;\nusing System.Reflection;\nusing System.Text;\nusing Hotspots.Api.Domain;\nusing log4net;\nusing Moriyama.Runtime.Models;\nusing Moriyama.Runtime.Umbraco.Interfaces;\nusing Newtonsoft.Json;\n\nnamespace Hotspots.Cms.Classes.Deployment\n{\n    public class JamDeploymentAdapter : IDeploymentAdapter\n    {\n        private static readonly ILog Logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\n\n        private readonly IEnumerable _endpoints;\n        \n        public JamDeploymentAdapter(string config, string sitemapFile)\n        {\n            _endpoints = JsonConvert.DeserializeObject&lt;IEnumerable&gt;(File.ReadAllText(config));\n        }\n\n        public void DeployContent(RuntimeContentModel model, DeploymentAction action)\n        {\n            Logger.Info(\"Got deployment request\");\n\n            if (model == null) return;\n      \n            foreach (var endpoint in _endpoints)\n            {\n                \n                    var url = endpoint.EndPoint + \"Admin/CmsApi/Deploy\";\n\n                    Logger.Info(\"Deploy to URL: \" + url);\n\n                    using (var client = new WebClient())\n                    {\n                        var reqparm = new NameValueCollection\n                        {\n                            {\"Key\", authKey},\n                            {\"Json\", JsonConvert.SerializeObject(model)},\n                            {\"Action\", action.ToString().ToLower()}\n                        };\n\n                        Logger.Info(\"Sending to API: \" + url);\n                        Logger.Info(JsonConvert.SerializeObject(reqparm, Formatting.Indented));\n\n                        var responsebytes = client.UploadValues(url, \"POST\", reqparm);\n                        var responsebody = Encoding.UTF8.GetString(responsebytes);\n                    }\n                }\n            }\n        }\n    }\n}\n</pre>\n<p>It is a very simple yet powerful concept. Umbraco already has excellent support for writing Media into CDN (S3, Azure etc), and this is the equivalent for content.</p>\n<p>Currently I'm excited about the opportunity to plug this into Umbraco as a service. This would allow you to use Umbraco as your CMS but push your content to any type of application - and the setup would take minutes.</p>\n<p>Once you have all of your content in a Zip, GIT repo or cloud storage you can have a language specific implementation of the runtime over that store to consume your content on a mobile app, smart TV app or any other such emerging platform.</p>",
    "commentsDisabled": 0
  },
  "Template": "Post",
  "CacheTime": null,
  "SortOrder": 0,
  "Level": 5
}